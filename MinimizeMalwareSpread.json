{ "title": "Minimize Malware Spread", 
  "source": "https://leetcode.com/problems/minimize-malware-spread/" , 
  "topics": "Graph" , 
  "tags": "Undirected" , 
  "technics": "UnionFind" , 
  "input" : "Given a graph where some nodes are connected. given another list of infected nodes which will spread to all adjacent nodes and so on. Return a node from the list of infected nodes to minimize the spread to the nodes after removal" ,     
  "output": "a node in infected node to be removed to minimize the spread" , 
  "solution": "This is a UF problem where we need to find which nodes are connected together. After we union find the graph, we get the size of each connected component. Then we can run through the list of infected nodes and see which one has the most counts and is separated. The last bit of the logic is in the code. It's long to explain. " , 
  "runtime": "", 
  "note": "The test cases are stupid on lc"}

